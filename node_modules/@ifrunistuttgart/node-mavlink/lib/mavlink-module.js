"use strict";
/*
 * mavlink-module.ts
 *
 * Copyright (c) 2019,
 * Institute of Flight Mechanics and Control, University of Stuttgart.
 * Pascal Gro√ü <pascal.gross@ifr.uni-stuttgart.de>
 * All rights reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var mavlink_packer_v1_1 = require("./mavlink-v1/mavlink-packer-v1");
var mavlink_packer_v2_1 = require("./mavlink-v2/mavlink-packer-v2");
var mavlink_parser_v1_1 = require("./mavlink-v1/mavlink-parser-v1");
var mavlink_parser_v2_1 = require("./mavlink-v2/mavlink-parser-v2");
var events_1 = require("events");
var MAVLinkModule = /** @class */ (function (_super) {
    __extends(MAVLinkModule, _super);
    function MAVLinkModule(messageRegistry, system_id, auto_negotiate) {
        if (system_id === void 0) { system_id = 1; }
        if (auto_negotiate === void 0) { auto_negotiate = true; }
        var _this = _super.call(this) || this;
        _this.messageRegistry = messageRegistry;
        _this.system_id = system_id;
        _this.packer = new mavlink_packer_v1_1.MAVLinkPackerV1();
        _this.parser = new mavlink_parser_v1_1.MAVLinkParserV1();
        _this._protocol_version = 1.0;
        _this.registerMessages(messageRegistry);
        if (auto_negotiate) {
            setTimeout(function () { return _this.auto_negotiate(); }, 1000);
        }
        return _this;
    }
    Object.defineProperty(MAVLinkModule.prototype, "protocol_version", {
        get: function () {
            return this._protocol_version;
        },
        enumerable: true,
        configurable: true
    });
    MAVLinkModule.prototype.registerMessages = function (messageRegistry) {
        for (var _i = 0, messageRegistry_1 = messageRegistry; _i < messageRegistry_1.length; _i++) {
            var message_factory_tuple = messageRegistry_1[_i];
            this.parser.register(message_factory_tuple[0], message_factory_tuple[1]);
            this.packer.register(message_factory_tuple[0], message_factory_tuple[1]);
        }
    };
    MAVLinkModule.prototype.pack = function (messages) {
        var buffer = Buffer.alloc(0);
        for (var _i = 0, messages_1 = messages; _i < messages_1.length; _i++) {
            var message = messages_1[_i];
            buffer = Buffer.concat([buffer, this.packer.packMessage(message)]);
        }
        return buffer;
    };
    MAVLinkModule.prototype.parse = function (bytes) {
        return __awaiter(this, void 0, void 0, function () {
            var messages, _i, messages_2, message;
            return __generator(this, function (_a) {
                this.emit('test', { test: "test" });
                try {
                    messages = this.parser.parse(bytes);
                    if (messages) {
                        for (_i = 0, messages_2 = messages; _i < messages_2.length; _i++) {
                            message = messages_2[_i];
                            this.emit(message._message_name, message);
                            this.emit('message', message);
                        }
                    }
                    return [2 /*return*/, messages];
                }
                catch (e) {
                    this.emit('error', e);
                }
                return [2 /*return*/, []];
            });
        });
    };
    MAVLinkModule.prototype.upgradeLink = function () {
        console.log('Upgrading link to MAVLink 2.0');
        this._protocol_version = 2.0;
        this.packer = new mavlink_packer_v2_1.MAVLinkPackerV2();
        this.parser = new mavlink_parser_v2_1.MAVLinkParserV2();
        this.registerMessages(this.messageRegistry);
    };
    MAVLinkModule.prototype.downgradeLink = function () {
        console.log('Downgrading link to MAVLink 1.0');
        this._protocol_version = 1.0;
        this.packer = new mavlink_packer_v1_1.MAVLinkPackerV1();
        this.parser = new mavlink_parser_v1_1.MAVLinkParserV1();
        this.registerMessages(this.messageRegistry);
    };
    MAVLinkModule.prototype.auto_negotiate = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cmd, timer_1, bytes;
            var _this = this;
            return __generator(this, function (_a) {
                if (this._protocol_version === 1.0) {
                    cmd = this.packer.instantiateMessage(0, 0, 76);
                    cmd['command'] = 519; // MAV_CMD_REQUEST_PROTOCOL_VERSION
                    this.on('PROTOCOL_VERSION', function (message) {
                        console.log('Received PROTOCOL_VERSION. Handshake complete.');
                        clearTimeout(timer_1);
                    });
                    bytes = this.packer.packMessage(cmd);
                    timer_1 = setTimeout(function () { return _this.downgradeLink(); }, 1000);
                    this.upgradeLink();
                    this.emit(cmd._message_name, bytes);
                }
                return [2 /*return*/];
            });
        });
    };
    return MAVLinkModule;
}(events_1.EventEmitter));
exports.MAVLinkModule = MAVLinkModule;
//# sourceMappingURL=mavlink-module.js.map