"use strict";
/*
 * mavlink-parser-base.ts
 *
 * Copyright (c) 2019,
 * Institute of Flight Mechanics and Control, University of Stuttgart.
 * Pascal Gro√ü <pascal.gross@ifr.uni-stuttgart.de>
 * All rights reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var parser_state_enum_1 = require("./parser-state.enum");
var MAVLinkParserBase = /** @class */ (function () {
    function MAVLinkParserBase() {
        this.expected_packet_length = -1;
        this.message_factory_tuples = new Array();
        this.state = parser_state_enum_1.ParserState.WaitingForMagicByte;
        this.buffer = Buffer.alloc(0);
    }
    MAVLinkParserBase.prototype.parse = function (bytes) {
        var messages = [];
        if (this.state == parser_state_enum_1.ParserState.WaitingForMagicByte) {
            // look for the defined magic byte
            var message_start = bytes.indexOf(this.start_marker);
            if (message_start > -1) {
                this.buffer = bytes.slice(message_start);
                this.state = parser_state_enum_1.ParserState.WaitingForHeaderComplete;
            }
        }
        else {
            this.buffer = Buffer.concat([this.buffer, bytes]);
        }
        if (this.state == parser_state_enum_1.ParserState.WaitingForHeaderComplete) {
            if (this.buffer.length >= this.minimum_packet_length) {
                this.state = parser_state_enum_1.ParserState.WaitingForMessageComplete;
                this.expected_packet_length = this.calculate_packet_length(this.buffer.slice(0, this.minimum_packet_length));
                if (this.expected_packet_length < 0 || this.expected_packet_length < this.minimum_packet_length) {
                    // something was wrong. drop the magic byte and restart.
                    this.expected_packet_length = -1;
                    this.state = parser_state_enum_1.ParserState.WaitingForMagicByte;
                    this.buffer = this.buffer.slice(1);
                }
            }
        }
        if (this.state == parser_state_enum_1.ParserState.WaitingForMessageComplete) {
            if (this.buffer.length >= this.expected_packet_length) {
                try {
                    var message = this.parseMessage(this.buffer.slice(0, this.expected_packet_length));
                    if (message) {
                        messages.push(message);
                    }
                }
                catch (e) {
                    throw e;
                }
                finally {
                    // something was complete. Regardless of a complete message, drop the magic byte and restart.
                    this.expected_packet_length = -1;
                    this.state = parser_state_enum_1.ParserState.WaitingForMagicByte;
                    this.buffer = this.buffer.slice(1);
                }
            }
        }
        return messages;
    };
    MAVLinkParserBase.prototype.register = function (message_id, constructorFn) {
        this.message_factory_tuples.push([message_id, constructorFn]);
    };
    MAVLinkParserBase.prototype.instantiateMessage = function (system_id, component_id, message_id) {
        var message_factory_tuple = this.message_factory_tuples.find(function (message_factory_tuple) { return message_factory_tuple[0] == message_id; });
        if (message_factory_tuple) {
            var constructorFn = message_factory_tuple[1];
            return new constructorFn(system_id, component_id);
        }
        throw new Error("Unknown message ID.");
    };
    return MAVLinkParserBase;
}());
exports.MAVLinkParserBase = MAVLinkParserBase;
//# sourceMappingURL=mavlink-parser-base.js.map