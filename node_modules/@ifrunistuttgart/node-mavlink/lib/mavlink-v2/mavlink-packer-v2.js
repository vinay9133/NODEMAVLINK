"use strict";
/*
 * mavlink-packer-v2.ts
 *
 * Copyright (c) 2019,
 * Institute of Flight Mechanics and Control, University of Stuttgart.
 * Pascal Gro√ü <pascal.gross@ifr.uni-stuttgart.de>
 * All rights reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var mavlink_packer_base_1 = require("../mavlink-packer-base");
var mavlink_message_1 = require("../mavlink-message");
var MAVLinkPackerV2 = /** @class */ (function (_super) {
    __extends(MAVLinkPackerV2, _super);
    function MAVLinkPackerV2() {
        var _this = _super.call(this) || this;
        _this.start_marker = 0xFD;
        _this.minimum_packet_length = 12;
        return _this;
    }
    MAVLinkPackerV2.prototype.packMessage = function (message) {
        var buffer = Buffer.alloc(this.minimum_packet_length + message._payload_length);
        buffer.writeUInt8(this.start_marker, 0);
        buffer.writeUInt8(message._payload_length, 1);
        buffer.writeUInt8(0, 2);
        buffer.writeUInt8(0, 3);
        buffer.writeUInt8(0, 4);
        buffer.writeUInt8(message._system_id, 5);
        buffer.writeUInt8(message._component_id, 6);
        buffer.writeUIntLE(message._message_id, 7, 3);
        var start = 0;
        for (var _i = 0, _a = message._message_fields; _i < _a.length; _i++) {
            var field = _a[_i];
            var field_name = field[0];
            var field_type = field[1];
            var extension_field = field[2];
            var field_length = message.sizeof(field_type);
            if (!extension_field) {
                this.write(buffer, message[field_name], start + this.minimum_packet_length - 2, field_type);
                start += field_length;
            }
        }
        var actual = message.x25CRC(buffer.slice(1, this.minimum_packet_length + message._payload_length - 2));
        buffer.writeUInt16LE(actual, this.minimum_packet_length + message._payload_length - 2);
        return buffer;
    };
    MAVLinkPackerV2.prototype.write = function (bytes, message_field, start, type) {
        switch (type) {
            case "uint8_t":
                return bytes.writeUInt8(message_field, start);
            case "uint16_t":
                return bytes.writeUInt16LE(message_field, start);
            case "uint32_t":
                return bytes.writeUInt32LE(message_field, start);
            case "uint64_t":
                return mavlink_message_1.writeUInt64LE(bytes, message_field, start);
            case "int8_t":
                return bytes.writeInt8(message_field, start);
            case "int16_t":
                return bytes.writeInt16LE(message_field, start);
            case "int32_t":
                return bytes.writeInt32LE(message_field, start);
            case "int64_t":
                return mavlink_message_1.writeInt64LE(bytes, message_field, start);
            case "float":
                return bytes.writeFloatLE(message_field, start);
            case "double":
                return bytes.writeDoubleLE(message_field, start);
            case "char":
                return bytes.write(message_field, start, 1, 'ascii');
        }
    };
    return MAVLinkPackerV2;
}(mavlink_packer_base_1.MAVLinkPackerBase));
exports.MAVLinkPackerV2 = MAVLinkPackerV2;
//# sourceMappingURL=mavlink-packer-v2.js.map